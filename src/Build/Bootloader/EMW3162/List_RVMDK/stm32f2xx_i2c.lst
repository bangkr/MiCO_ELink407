L 1 "..\..\..\Platform\Common\Cortex-M3\STM32F2xx\STM32F2xx_Drv\STM32F2xx_StdPeriph_Driver\src\stm32f2xx_i2c.c"
N/**
N  ******************************************************************************
N  * @file    stm32f2xx_i2c.c
N  * @author  MCD Application Team
N  * @version V1.1.2
N  * @date    05-March-2012 
N  * @brief   This file provides firmware functions to manage the following 
N  *          functionalities of the Inter-integrated circuit (I2C)
N  *           - Initialization and Configuration
N  *           - Data transfers
N  *           - PEC management
N  *           - DMA transfers management
N  *           - Interrupts, events and flags management 
N  *           
N  *  @verbatim
N  *    
N  *          ===================================================================
N  *                                 How to use this driver
N  *          ===================================================================
N  *          1. Enable peripheral clock using RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2Cx, ENABLE)
N  *             function for I2C1, I2C2 or I2C3.
N  *
N  *          2. Enable SDA, SCL  and SMBA (when used) GPIO clocks using 
N  *             RCC_AHBPeriphClockCmd() function. 
N  *
N  *          3. Peripherals alternate function: 
N  *                 - Connect the pin to the desired peripherals' Alternate 
N  *                   Function (AF) using GPIO_PinAFConfig() function
N  *                 - Configure the desired pin in alternate function by:
N  *                   GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
N  *                 - Select the type, pull-up/pull-down and output speed via 
N  *                   GPIO_PuPd, GPIO_OType and GPIO_Speed members
N  *                 - Call GPIO_Init() function
N  *                 Recommended configuration is Push-Pull, Pull-up, Open-Drain.
N  *                 Add an external pull up if necessary (typically 4.7 KOhm).      
N  *        
N  *          4. Program the Mode, duty cycle , Own address, Ack, Speed and Acknowledged
N  *             Address using the I2C_Init() function.
N  *
N  *          5. Optionally you can enable/configure the following parameters without
N  *             re-initialization (i.e there is no need to call again I2C_Init() function):
N  *              - Enable the acknowledge feature using I2C_AcknowledgeConfig() function
N  *              - Enable the dual addressing mode using I2C_DualAddressCmd() function
N  *              - Enable the general call using the I2C_GeneralCallCmd() function
N  *              - Enable the clock stretching using I2C_StretchClockCmd() function
N  *              - Enable the fast mode duty cycle using the I2C_FastModeDutyCycleConfig()
N  *                function.
N  *              - Configure the NACK position for Master Receiver mode in case of 
N  *                2 bytes reception using the function I2C_NACKPositionConfig().  
N  *              - Enable the PEC Calculation using I2C_CalculatePEC() function
N  *              - For SMBus Mode: 
N  *                   - Enable the Address Resolution Protocol (ARP) using I2C_ARPCmd() function
N  *                   - Configure the SMBusAlert pin using I2C_SMBusAlertConfig() function
N  *
N  *          6. Enable the NVIC and the corresponding interrupt using the function 
N  *             I2C_ITConfig() if you need to use interrupt mode. 
N  *
N  *          7. When using the DMA mode 
N  *                   - Configure the DMA using DMA_Init() function
N  *                   - Active the needed channel Request using I2C_DMACmd() or
N  *                     I2C_DMALastTransferCmd() function.
N  *              @note When using DMA mode, I2C interrupts may be used at the same time to
N  *                    control the communication flow (Start/Stop/Ack... events and errors).
N  * 
N  *          8. Enable the I2C using the I2C_Cmd() function.
N  * 
N  *          9. Enable the DMA using the DMA_Cmd() function when using DMA mode in the 
N  *             transfers. 
N  *
N  *  @endverbatim
N  *  
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
N  *
N  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
N  * You may not use this file except in compliance with the License.
N  * You may obtain a copy of the License at:
N  *
N  *        http://www.st.com/software_license_agreement_liberty_v2
N  *
N  * Unless required by applicable law or agreed to in writing, software 
N  * distributed under the License is distributed on an "AS IS" BASIS, 
N  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N  * See the License for the specific language governing permissions and
N  * limitations under the License.
N  *
N  ******************************************************************************
N  */
N
N/* Includes ------------------------------------------------------------------*/
C "..\..\..\Platform\Common\Cortex-M3\STM32F2xx\STM32F2xx_Drv\STM32F2xx_StdPeriph_Driver\src\stm32f2xx_i2c.c" 93 27 cannot open source input file "stm32f2xx_i2c.h": No such file or directory
N#include "stm32f2xx_i2c.h"
