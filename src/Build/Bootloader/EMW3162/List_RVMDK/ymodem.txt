; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\..\..\build\bootloader\emw3162\obj_rvmdk\ymodem.o --asm_dir=..\..\..\Build\Bootloader\EMW3162\List_RVMDK\ --list_dir=..\..\..\Build\Bootloader\EMW3162\List_RVMDK\ --depend=..\..\..\build\bootloader\emw3162\obj_rvmdk\ymodem.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=1,1293 -I..\..\..\include -I..\..\..\Platform\Common\Cortex-M4\CMSIS -I..\..\..\Platform\Common\Cortex-M4\STM32F4xx\STM32F4xx_Drv -I..\..\..\Platform\Common\Cortex-M4\STM32F4xx -I..\..\..\Platform\Common\Cortex-M4 -I..\..\..\Platform\Common\Cortex-M4\STM32F4xx\STM32F4xx_Drv\STM32F4xx_StdPeriph_Driver\inc -I..\..\..\Bootloader -I..\..\..\MICO -I..\..\..\Platform\EMW3162 -I..\..\..\External -I..\..\..\Library\support -I..\..\..\Platform\include -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.1\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\1.0.6\Device\Include -D__MICROLIB -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DBOOTLOADER -DSIZE_OPTIMIZE ..\..\..\Bootloader\ymodem.c]
                          THUMB

                          AREA ||i.CalChecksum||, CODE, READONLY, ALIGN=1

                  CalChecksum PROC
;;;415      */
;;;416    uint8_t CalChecksum(const uint8_t* data, uint32_t size)
000000  2200              MOVS     r2,#0
;;;417    {
;;;418      uint32_t sum = 0;
;;;419      const uint8_t* dataEnd = data+size;
000002  4401              ADD      r1,r1,r0
000004  e002              B        |L1.12|
                  |L1.6|
;;;420    
;;;421      while(data < dataEnd )
;;;422        sum += *data++;
000006  f8103b01          LDRB     r3,[r0],#1
00000a  441a              ADD      r2,r2,r3
                  |L1.12|
00000c  4288              CMP      r0,r1                 ;421
00000e  d3fa              BCC      |L1.6|
;;;423    
;;;424      return (sum & 0xffu);
000010  b2d0              UXTB     r0,r2
;;;425    }
000012  4770              BX       lr
;;;426    
                          ENDP


                          AREA ||i.Cal_CRC16||, CODE, READONLY, ALIGN=1

                  Cal_CRC16 PROC
;;;395      */
;;;396    uint16_t Cal_CRC16(const uint8_t* data, uint32_t size)
000000  b530              PUSH     {r4,r5,lr}
;;;397    {
000002  4604              MOV      r4,r0
;;;398      uint32_t crc = 0;
000004  2000              MOVS     r0,#0
;;;399      const uint8_t* dataEnd = data+size;
000006  1865              ADDS     r5,r4,r1
000008  e003              B        |L2.18|
                  |L2.10|
;;;400    
;;;401      while(data < dataEnd)
;;;402        crc = UpdateCRC16(crc, *data++);
00000a  f8141b01          LDRB     r1,[r4],#1
00000e  f7fffffe          BL       UpdateCRC16
                  |L2.18|
000012  42ac              CMP      r4,r5                 ;401
000014  d3f9              BCC      |L2.10|
;;;403     
;;;404      crc = UpdateCRC16(crc, 0);
000016  2100              MOVS     r1,#0
000018  f7fffffe          BL       UpdateCRC16
;;;405      crc = UpdateCRC16(crc, 0);
00001c  e8bd4030          POP      {r4,r5,lr}
000020  2100              MOVS     r1,#0
000022  f7ffbffe          B.W      UpdateCRC16
;;;406    
;;;407      return crc&0xffffu;
;;;408    }
;;;409    
                          ENDP


                          AREA ||i.Receive_Byte||, CODE, READONLY, ALIGN=1

                  Receive_Byte PROC
;;;55       */
;;;56     static int32_t Receive_Byte (uint8_t *c, uint32_t timeout)
000000  460b              MOV      r3,r1
;;;57     {
000002  b510              PUSH     {r4,lr}
;;;58       if (MicoUartRecv( STDIO_UART, c, 1, timeout )!=kNoErr)
000004  4601              MOV      r1,r0
000006  2201              MOVS     r2,#1
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       MicoUartRecv
00000e  2800              CMP      r0,#0
000010  d001              BEQ      |L3.22|
;;;59         return -1;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L3.22|
;;;60       else
;;;61         return 0;
;;;62     }
000016  bd10              POP      {r4,pc}
;;;63     
                          ENDP


                          AREA ||i.Receive_Packet||, CODE, READONLY, ALIGN=1

                  Receive_Packet PROC
;;;86       */
;;;87     static int32_t Receive_Packet (uint8_t *data, int32_t *length, uint32_t timeout)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;88     {
000004  4688              MOV      r8,r1
;;;89       uint16_t i, packet_size;
;;;90       uint8_t c;
;;;91       *length = 0;
000006  2100              MOVS     r1,#0
000008  4605              MOV      r5,r0                 ;88
;;;92       if (Receive_Byte(&c, timeout) != 0)
00000a  f8c81000          STR      r1,[r8,#0]
00000e  4692              MOV      r10,r2                ;88
000010  4611              MOV      r1,r2
000012  4668              MOV      r0,sp
000014  f7fffffe          BL       Receive_Byte
;;;93       {
;;;94         return -1;
000018  f04f39ff          MOV      r9,#0xffffffff
00001c  bbb0              CBNZ     r0,|L4.140|
;;;95       }
;;;96       switch (c)
00001e  f89d1000          LDRB     r1,[sp,#0]
000022  2918              CMP      r1,#0x18
000024  d014              BEQ      |L4.80|
000026  dc06              BGT      |L4.54|
000028  2901              CMP      r1,#1
00002a  d009              BEQ      |L4.64|
00002c  2902              CMP      r1,#2
00002e  d009              BEQ      |L4.68|
000030  2904              CMP      r1,#4
000032  d12b              BNE      |L4.140|
000034  e02e              B        |L4.148|
                  |L4.54|
000036  2941              CMP      r1,#0x41
000038  d016              BEQ      |L4.104|
00003a  2961              CMP      r1,#0x61
00003c  d126              BNE      |L4.140|
00003e  e013              B        |L4.104|
                  |L4.64|
;;;97       {
;;;98         case SOH:
;;;99           packet_size = PACKET_SIZE;
000040  2680              MOVS     r6,#0x80
;;;100          break;
000042  e001              B        |L4.72|
                  |L4.68|
;;;101        case STX:
;;;102          packet_size = PACKET_1K_SIZE;
000044  f44f6680          MOV      r6,#0x400
                  |L4.72|
;;;103          break;
;;;104        case EOT:
;;;105          return 0;
;;;106        case CA:
;;;107          if ((Receive_Byte(&c, timeout) == 0) && (c == CA))
;;;108          {
;;;109            *length = -1;
;;;110            return 0;
;;;111          }
;;;112          else
;;;113          {
;;;114            return -1;
;;;115          }
;;;116        case ABORT1:
;;;117        case ABORT2:
;;;118          return 1;
;;;119        default:
;;;120          return -1;
;;;121      }
;;;122      *data = c;
;;;123      for (i = 1; i < (packet_size + PACKET_OVERHEAD); i ++)
000048  2401              MOVS     r4,#1
00004a  7029              STRB     r1,[r5,#0]            ;122
00004c  1d77              ADDS     r7,r6,#5
00004e  e015              B        |L4.124|
                  |L4.80|
000050  4651              MOV      r1,r10                ;107
000052  4668              MOV      r0,sp                 ;107
000054  f7fffffe          BL       Receive_Byte
000058  b9c0              CBNZ     r0,|L4.140|
00005a  f89d0000          LDRB     r0,[sp,#0]            ;107
00005e  2818              CMP      r0,#0x18              ;107
000060  d114              BNE      |L4.140|
000062  f8c89000          STR      r9,[r8,#0]            ;110
000066  e015              B        |L4.148|
                  |L4.104|
000068  2001              MOVS     r0,#1                 ;118
                  |L4.106|
;;;124      {
;;;125        if (Receive_Byte(data + i, timeout) != 0)
;;;126        {
;;;127          return -1;
;;;128        }
;;;129      }
;;;130      if (data[PACKET_SEQNO_INDEX] != ((data[PACKET_SEQNO_COMP_INDEX] ^ 0xff) & 0xff))
;;;131      {
;;;132        return -1;
;;;133      }
;;;134      *length = packet_size;
;;;135      return 0;
;;;136    }
00006a  e8bd8ff8          POP      {r3-r11,pc}
                  |L4.110|
00006e  1928              ADDS     r0,r5,r4              ;125
000070  4651              MOV      r1,r10                ;125
000072  f7fffffe          BL       Receive_Byte
000076  b948              CBNZ     r0,|L4.140|
000078  1c64              ADDS     r4,r4,#1              ;125
00007a  b2a4              UXTH     r4,r4                 ;123
                  |L4.124|
00007c  42bc              CMP      r4,r7                 ;123
00007e  d3f6              BCC      |L4.110|
000080  78a9              LDRB     r1,[r5,#2]            ;130
000082  7868              LDRB     r0,[r5,#1]            ;130
000084  f08101ff          EOR      r1,r1,#0xff           ;130
000088  4288              CMP      r0,r1                 ;130
00008a  d001              BEQ      |L4.144|
                  |L4.140|
00008c  4648              MOV      r0,r9                 ;132
00008e  e7ec              B        |L4.106|
                  |L4.144|
000090  f8c86000          STR      r6,[r8,#0]            ;134
                  |L4.148|
000094  2000              MOVS     r0,#0                 ;135
000096  e7e8              B        |L4.106|
;;;137    
                          ENDP


                          AREA ||i.Send_Byte||, CODE, READONLY, ALIGN=2

                  Send_Byte PROC
;;;68       */
;;;69     static uint32_t Send_Byte (uint8_t c)
000000  b510              PUSH     {r4,lr}
;;;70     {
;;;71       putchar(c);
000002  4902              LDR      r1,|L5.12|
000004  f7fffffe          BL       putc
;;;72       return 0;
000008  2000              MOVS     r0,#0
;;;73     }
00000a  bd10              POP      {r4,pc}
;;;74     
                          ENDP

                  |L5.12|
                          DCD      __stdout

                          AREA ||i.UpdateCRC16||, CODE, READONLY, ALIGN=1

                  UpdateCRC16 PROC
;;;368      */
;;;369    uint16_t UpdateCRC16(uint16_t crcIn, uint8_t byte)
000000  f4417180          ORR      r1,r1,#0x100
;;;370    {
;;;371      uint32_t crc = crcIn;
;;;372      uint32_t in = byte | 0x100;
;;;373    
;;;374      do
;;;375      {
;;;376        crc <<= 1;
;;;377        in <<= 1;
;;;378        if(in & 0x100)
;;;379          ++crc;
;;;380        if(crc & 0x10000)
;;;381          crc ^= 0x1021;
000004  f2410221          MOV      r2,#0x1021
                  |L6.8|
000008  0040              LSLS     r0,r0,#1              ;376
00000a  0049              LSLS     r1,r1,#1              ;377
00000c  05cb              LSLS     r3,r1,#23             ;378
00000e  d500              BPL      |L6.18|
000010  1c40              ADDS     r0,r0,#1              ;378
                  |L6.18|
000012  03c3              LSLS     r3,r0,#15             ;380
000014  d500              BPL      |L6.24|
000016  4050              EORS     r0,r0,r2
                  |L6.24|
;;;382      }
;;;383      
;;;384      while(!(in & 0x10000));
000018  03cb              LSLS     r3,r1,#15
00001a  d5f5              BPL      |L6.8|
;;;385    
;;;386      return crc & 0xffffu;
00001c  b280              UXTH     r0,r0
;;;387    }
00001e  4770              BX       lr
;;;388    
                          ENDP


                          AREA ||i.Ymodem_CheckResponse||, CODE, READONLY, ALIGN=1

                  Ymodem_CheckResponse PROC
;;;283      */
;;;284    int32_t Ymodem_CheckResponse(uint8_t c)
000000  2000              MOVS     r0,#0
;;;285    {
;;;286      return 0;
;;;287    }
000002  4770              BX       lr
;;;288    
                          ENDP


                          AREA ||i.Ymodem_PrepareIntialPacket||, CODE, READONLY, ALIGN=1

                  Ymodem_PrepareIntialPacket PROC
;;;294      */
;;;295    void Ymodem_PrepareIntialPacket(uint8_t *data, const uint8_t* fileName, uint32_t *length)
000000  b5fe              PUSH     {r1-r7,lr}
;;;296    {
000002  4605              MOV      r5,r0
;;;297      uint16_t i, j;
;;;298      uint8_t file_ptr[10];
;;;299      
;;;300      /* Make first three packet */
;;;301      data[0] = SOH;
000004  2001              MOVS     r0,#1
;;;302      data[1] = 0x00;
000006  2600              MOVS     r6,#0
000008  7028              STRB     r0,[r5,#0]            ;301
00000a  706e              STRB     r6,[r5,#1]
;;;303      data[2] = 0xff;
00000c  20ff              MOVS     r0,#0xff
00000e  70a8              STRB     r0,[r5,#2]
;;;304      
;;;305      /* Filename packet has valid data */
;;;306      for (i = 0; (fileName[i] != '\0') && (i < FILE_NAME_LENGTH);i++)
000010  4634              MOV      r4,r6
000012  e003              B        |L8.28|
                  |L8.20|
;;;307      {
;;;308         data[i + PACKET_HEADER] = fileName[i];
000014  192b              ADDS     r3,r5,r4
000016  1c64              ADDS     r4,r4,#1
000018  70d8              STRB     r0,[r3,#3]
00001a  b2a4              UXTH     r4,r4                 ;306
                  |L8.28|
00001c  5d08              LDRB     r0,[r1,r4]            ;306
00001e  b108              CBZ      r0,|L8.36|
000020  2cff              CMP      r4,#0xff              ;306
000022  d9f7              BLS      |L8.20|
                  |L8.36|
;;;309      }
;;;310    
;;;311      data[i + PACKET_HEADER] = 0x00;
000024  1928              ADDS     r0,r5,r4
000026  70c6              STRB     r6,[r0,#3]
;;;312      
;;;313      Int2Str (file_ptr, *length);
000028  4668              MOV      r0,sp
00002a  6811              LDR      r1,[r2,#0]
00002c  f7fffffe          BL       Int2Str
;;;314      for (j =0, i = i + PACKET_HEADER + 1; file_ptr[j] != '\0' ; )
000030  2100              MOVS     r1,#0
000032  1d24              ADDS     r4,r4,#4
000034  b2a0              UXTH     r0,r4
000036  466b              MOV      r3,sp                 ;298
000038  e004              B        |L8.68|
                  |L8.58|
;;;315      {
;;;316         data[i++] = file_ptr[j++];
00003a  1c49              ADDS     r1,r1,#1
00003c  542a              STRB     r2,[r5,r0]
00003e  1c40              ADDS     r0,r0,#1
000040  b289              UXTH     r1,r1
000042  b280              UXTH     r0,r0
                  |L8.68|
000044  5c5a              LDRB     r2,[r3,r1]            ;314
000046  2a00              CMP      r2,#0                 ;314
000048  d1f7              BNE      |L8.58|
00004a  e002              B        |L8.82|
                  |L8.76|
;;;317      }
;;;318      
;;;319      for (j = i; j < PACKET_SIZE + PACKET_HEADER; j++)
;;;320      {
;;;321        data[j] = 0;
00004c  542e              STRB     r6,[r5,r0]
00004e  1c40              ADDS     r0,r0,#1
000050  b280              UXTH     r0,r0                 ;319
                  |L8.82|
000052  2883              CMP      r0,#0x83              ;319
000054  d3fa              BCC      |L8.76|
;;;322      }
;;;323    }
000056  bdfe              POP      {r1-r7,pc}
;;;324    
                          ENDP


                          AREA ||i.Ymodem_PreparePacket||, CODE, READONLY, ALIGN=1

                  Ymodem_PreparePacket PROC
;;;333      */
;;;334    void Ymodem_PreparePacket(mico_flash_t flash, uint32_t flashdestination, uint8_t *data, uint8_t pktNo, uint32_t sizeBlk)
000000  b57f              PUSH     {r0-r6,lr}
;;;335    {
000002  4614              MOV      r4,r2
;;;336      uint16_t i, size, packetSize;
;;;337      
;;;338      /* Make first three packet */
;;;339      packetSize = sizeBlk >= PACKET_1K_SIZE ? PACKET_1K_SIZE : PACKET_SIZE;
000004  9908              LDR      r1,[sp,#0x20]
000006  f44f6280          MOV      r2,#0x400
00000a  4291              CMP      r1,r2
00000c  d301              BCC      |L9.18|
00000e  4615              MOV      r5,r2
000010  e000              B        |L9.20|
                  |L9.18|
000012  2580              MOVS     r5,#0x80
                  |L9.20|
;;;340      size = sizeBlk < packetSize ? sizeBlk :packetSize;
000014  42a9              CMP      r1,r5
000016  d300              BCC      |L9.26|
000018  4629              MOV      r1,r5
                  |L9.26|
00001a  b28e              UXTH     r6,r1
;;;341      if (packetSize == PACKET_1K_SIZE)
00001c  4295              CMP      r5,r2
00001e  d101              BNE      |L9.36|
;;;342      {
;;;343         data[0] = STX;
000020  2102              MOVS     r1,#2
000022  e000              B        |L9.38|
                  |L9.36|
;;;344      }
;;;345      else
;;;346      {
;;;347         data[0] = SOH;
000024  2101              MOVS     r1,#1
                  |L9.38|
000026  7021              STRB     r1,[r4,#0]
;;;348      }
;;;349      data[1] = pktNo;
000028  7063              STRB     r3,[r4,#1]
;;;350      data[2] = (~pktNo);
00002a  43d9              MVNS     r1,r3
00002c  70a1              STRB     r1,[r4,#2]
;;;351    
;;;352      MicoFlashRead(flash, &flashdestination, data + PACKET_HEADER, size);
00002e  4633              MOV      r3,r6
000030  1ce2              ADDS     r2,r4,#3
000032  a901              ADD      r1,sp,#4
000034  f7fffffe          BL       MicoFlashRead
;;;353    
;;;354      if ( size  <= packetSize)
000038  42ae              CMP      r6,r5
00003a  d809              BHI      |L9.80|
00003c  1cf6              ADDS     r6,r6,#3
;;;355      {
;;;356        for (i = size + PACKET_HEADER; i < packetSize + PACKET_HEADER; i++)
;;;357        {
;;;358          data[i] = 0x1A; /* EOF (0x1A) or 0x00 */
00003e  211a              MOVS     r1,#0x1a
000040  b2b0              UXTH     r0,r6                 ;356
000042  1ced              ADDS     r5,r5,#3
000044  e002              B        |L9.76|
                  |L9.70|
000046  5421              STRB     r1,[r4,r0]
000048  1c40              ADDS     r0,r0,#1
00004a  b280              UXTH     r0,r0                 ;356
                  |L9.76|
00004c  42a8              CMP      r0,r5                 ;356
00004e  d3fa              BCC      |L9.70|
                  |L9.80|
;;;359        }
;;;360      }
;;;361    }
000050  bd7f              POP      {r0-r6,pc}
;;;362    
                          ENDP


                          AREA ||i.Ymodem_Receive||, CODE, READONLY, ALIGN=2

                  Ymodem_Receive PROC
;;;142      */
;;;143    int32_t Ymodem_Receive (uint8_t *buf, mico_flash_t flash, uint32_t flashdestination, int32_t maxRecvSize)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;144    {
000004  f2ad4d24          SUB      sp,sp,#0x424
000008  4680              MOV      r8,r0
;;;145      uint8_t packet_data[PACKET_1K_SIZE + PACKET_OVERHEAD], file_size[FILE_SIZE_LENGTH], *file_ptr, *buf_ptr;
;;;146      int32_t i, packet_length, session_done, file_done, packets_received, errors, session_begin, size = 0;
00000a  2000              MOVS     r0,#0
;;;147      uint32_t  ramsource;
;;;148      MicoFlashInitialize(flash);
00000c  f8cd0418          STR      r0,[sp,#0x418]
000010  461f              MOV      r7,r3                 ;144
000012  f8dd0428          LDR      r0,[sp,#0x428]
000016  f7fffffe          BL       MicoFlashInitialize
;;;149    
;;;150      for (session_done = 0, errors = 0, session_begin = 0; ;)
00001a  f04f0b00          MOV      r11,#0
00001e  465d              MOV      r5,r11
000020  465e              MOV      r6,r11
000022  46ea              MOV      r10,sp                ;145
                  |L10.36|
;;;151      {
;;;152        for (packets_received = 0, file_done = 0, buf_ptr = buf; ;)
000024  2400              MOVS     r4,#0
000026  46a1              MOV      r9,r4
                  |L10.40|
;;;153        {
;;;154          switch (Receive_Packet(packet_data, &packet_length, NAK_TIMEOUT))
000028  f44f72fa          MOV      r2,#0x1f4
00002c  f20d411c          ADD      r1,sp,#0x41c
000030  4668              MOV      r0,sp
000032  f7fffffe          BL       Receive_Packet
000036  b1a8              CBZ      r0,|L10.100|
000038  2801              CMP      r0,#1
00003a  d076              BEQ      |L10.298|
;;;155          {
;;;156            case 0:
;;;157              errors = 0;
;;;158              switch (packet_length)
;;;159              {
;;;160                /* Abort by sender */
;;;161                case - 1:
;;;162                  Send_Byte(ACK);
;;;163                  MicoFlashFinalize(flash);
;;;164                  return 0;
;;;165                /* End of transmission */
;;;166                case 0:
;;;167                  Send_Byte(ACK);
;;;168                  file_done = 1;
;;;169                  break;
;;;170                /* Normal packet */
;;;171                default:
;;;172                  if ((packet_data[PACKET_SEQNO_INDEX] & 0xff) != (packets_received & 0xff))
;;;173                  {
;;;174                    Send_Byte(NAK);
;;;175                  }
;;;176                  else
;;;177                  {
;;;178                    if (packets_received == 0)
;;;179                    {
;;;180                      /* Filename packet */
;;;181                      if (packet_data[PACKET_HEADER] != 0)
;;;182                      {
;;;183                        /* Filename packet has valid data */
;;;184                        for (i = 0, file_ptr = packet_data + PACKET_HEADER; (*file_ptr != 0) && (i < FILE_NAME_LENGTH);)
;;;185                        {
;;;186                          FileName[i++] = *file_ptr++;
;;;187                        }
;;;188                        FileName[i++] = '\0';
;;;189                        for (i = 0, file_ptr ++; (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH);)
;;;190                        {
;;;191                          file_size[i++] = *file_ptr++;
;;;192                        }
;;;193                        file_size[i++] = '\0';
;;;194                        Str2Int(file_size, &size);
;;;195    
;;;196                        /* Test the size of the image to be sent */
;;;197                        /* Image size is greater than Flash size */
;;;198                        if (size > (maxRecvSize + 1))
;;;199                        {
;;;200                          /* End session */
;;;201                          Send_Byte(CA);
;;;202                          Send_Byte(CA);
;;;203                          MicoFlashFinalize(flash);
;;;204                          return -1;
;;;205                        }
;;;206                        /* erase user application area */
;;;207                        MicoFlashErase(flash, flashdestination, flashdestination + maxRecvSize - 1);
;;;208                        Send_Byte(ACK);
;;;209                        Send_Byte(CRC16);
;;;210                      }
;;;211                      /* Filename packet is empty, end session */
;;;212                      else
;;;213                      {
;;;214                        Send_Byte(ACK);
;;;215                        file_done = 1;
;;;216                        session_done = 1;
;;;217                        break;
;;;218                      }
;;;219                    }
;;;220                    /* Data packet */
;;;221                    else
;;;222                    {
;;;223                      memcpy(buf_ptr, packet_data + PACKET_HEADER, packet_length);
;;;224                      ramsource = (uint32_t)buf;
;;;225    
;;;226                      /* Write received data in Flash */
;;;227                      if (MicoFlashWrite(flash, &flashdestination, (uint8_t*) ramsource, (uint32_t) packet_length)  == 0)
;;;228                      {
;;;229                        Send_Byte(ACK);
;;;230                      }
;;;231                      else /* An error occurred while writing to Flash memory */
;;;232                      {
;;;233                        /* End session */
;;;234                        Send_Byte(CA);
;;;235                        Send_Byte(CA);
;;;236                        MicoFlashFinalize(flash);
;;;237                        return -2;
;;;238                      }
;;;239                    }
;;;240                    packets_received ++;
;;;241                    session_begin = 1;
;;;242                  }
;;;243              }
;;;244              break;
;;;245            case 1:
;;;246              Send_Byte(CA);
;;;247              Send_Byte(CA);
;;;248              MicoFlashFinalize(flash);
;;;249              return -3;
;;;250            default:
;;;251              if (session_begin > 0)
00003c  2e00              CMP      r6,#0
00003e  dd00              BLE      |L10.66|
000040  1c6d              ADDS     r5,r5,#1
                  |L10.66|
;;;252              {
;;;253                errors ++;
;;;254              }
;;;255              if (errors > MAX_ERRORS)
000042  2d05              CMP      r5,#5
000044  dd72              BLE      |L10.300|
;;;256              {
;;;257                Send_Byte(CA);
000046  2018              MOVS     r0,#0x18
000048  f7fffffe          BL       Send_Byte
;;;258                Send_Byte(CA);
00004c  2018              MOVS     r0,#0x18
                  |L10.78|
00004e  f7fffffe          BL       Send_Byte
;;;259                MicoFlashFinalize(flash);
000052  f8dd0428          LDR      r0,[sp,#0x428]
000056  f7fffffe          BL       MicoFlashFinalize
;;;260                return 0;
00005a  2000              MOVS     r0,#0
                  |L10.92|
;;;261              }
;;;262              Send_Byte(CRC16);
;;;263              break;
;;;264          }
;;;265          if (file_done != 0)
;;;266          {
;;;267            break;
;;;268          }
;;;269        }
;;;270        if (session_done != 0)
;;;271        {
;;;272          break;
;;;273        }
;;;274      }
;;;275      MicoFlashFinalize(flash);
;;;276      return (int32_t)size;
;;;277    }
00005c  f20d4d34          ADD      sp,sp,#0x434
000060  e8bd8ff0          POP      {r4-r11,pc}
                  |L10.100|
000064  f8dd241c          LDR      r2,[sp,#0x41c]        ;158
000068  2500              MOVS     r5,#0                 ;157
00006a  f1b23fff          CMP      r2,#0xffffffff        ;158
00006e  d007              BEQ      |L10.128|
000070  b142              CBZ      r2,|L10.132|
000072  f89d0001          LDRB     r0,[sp,#1]            ;172
000076  b2e1              UXTB     r1,r4                 ;172
000078  4288              CMP      r0,r1                 ;172
00007a  d007              BEQ      |L10.140|
00007c  2015              MOVS     r0,#0x15              ;174
00007e  e081              B        |L10.388|
                  |L10.128|
000080  2006              MOVS     r0,#6                 ;162
000082  e7e4              B        |L10.78|
                  |L10.132|
000084  2006              MOVS     r0,#6                 ;167
000086  f7fffffe          BL       Send_Byte
00008a  e081              B        |L10.400|
                  |L10.140|
00008c  b1dc              CBZ      r4,|L10.198|
00008e  f10a0103          ADD      r1,r10,#3             ;223
000092  4640              MOV      r0,r8                 ;223
000094  f7fffffe          BL       __aeabi_memcpy
000098  4642              MOV      r2,r8                 ;224
00009a  f20d412c          ADD      r1,sp,#0x42c          ;227
00009e  f8dd341c          LDR      r3,[sp,#0x41c]        ;227
0000a2  f8dd0428          LDR      r0,[sp,#0x428]        ;227
0000a6  f7fffffe          BL       MicoFlashWrite
0000aa  b3e8              CBZ      r0,|L10.296|
0000ac  2018              MOVS     r0,#0x18              ;234
0000ae  f7fffffe          BL       Send_Byte
0000b2  2018              MOVS     r0,#0x18              ;235
0000b4  f7fffffe          BL       Send_Byte
0000b8  f8dd0428          LDR      r0,[sp,#0x428]        ;236
0000bc  f7fffffe          BL       MicoFlashFinalize
0000c0  f06f0001          MVN      r0,#1                 ;237
0000c4  e7ca              B        |L10.92|
                  |L10.198|
0000c6  f89d0003          LDRB     r0,[sp,#3]            ;181
0000ca  b380              CBZ      r0,|L10.302|
0000cc  2000              MOVS     r0,#0                 ;184
0000ce  f10a0103          ADD      r1,r10,#3             ;184
0000d2  4e35              LDR      r6,|L10.424|
0000d4  e002              B        |L10.220|
                  |L10.214|
0000d6  5432              STRB     r2,[r6,r0]            ;186
0000d8  1c40              ADDS     r0,r0,#1              ;186
0000da  1c49              ADDS     r1,r1,#1              ;186
                  |L10.220|
0000dc  780a              LDRB     r2,[r1,#0]            ;184
0000de  b10a              CBZ      r2,|L10.228|
0000e0  28ff              CMP      r0,#0xff              ;184
0000e2  ddf8              BLE      |L10.214|
                  |L10.228|
0000e4  2300              MOVS     r3,#0                 ;188
0000e6  5433              STRB     r3,[r6,r0]            ;188
0000e8  4618              MOV      r0,r3                 ;189
0000ea  f50d6681          ADD      r6,sp,#0x408          ;145
0000ee  e001              B        |L10.244|
                  |L10.240|
0000f0  5432              STRB     r2,[r6,r0]            ;191
0000f2  1c40              ADDS     r0,r0,#1              ;191
                  |L10.244|
0000f4  f8112f01          LDRB     r2,[r1,#1]!           ;189
0000f8  2a20              CMP      r2,#0x20              ;189
0000fa  d001              BEQ      |L10.256|
0000fc  2810              CMP      r0,#0x10              ;189
0000fe  dbf7              BLT      |L10.240|
                  |L10.256|
000100  5433              STRB     r3,[r6,r0]            ;193
000102  f50d6183          ADD      r1,sp,#0x418          ;194
000106  4630              MOV      r0,r6                 ;194
000108  f7fffffe          BL       Str2Int
00010c  f8dd1418          LDR      r1,[sp,#0x418]        ;198
000110  1c78              ADDS     r0,r7,#1              ;198
000112  4281              CMP      r1,r0                 ;198
000114  dd11              BLE      |L10.314|
000116  2018              MOVS     r0,#0x18              ;201
000118  f7fffffe          BL       Send_Byte
00011c  2018              MOVS     r0,#0x18              ;202
00011e  f7fffffe          BL       Send_Byte
000122  f8dd0428          LDR      r0,[sp,#0x428]        ;203
000126  e003              B        |L10.304|
                  |L10.296|
000128  e018              B        |L10.348|
                  |L10.298|
00012a  e01d              B        |L10.360|
                  |L10.300|
00012c  e029              B        |L10.386|
                  |L10.302|
00012e  e011              B        |L10.340|
                  |L10.304|
000130  f7fffffe          BL       MicoFlashFinalize
000134  f04f30ff          MOV      r0,#0xffffffff        ;204
000138  e790              B        |L10.92|
                  |L10.314|
00013a  f8dd142c          LDR      r1,[sp,#0x42c]        ;207
00013e  f8dd0428          LDR      r0,[sp,#0x428]        ;207
000142  19ca              ADDS     r2,r1,r7              ;207
000144  1e52              SUBS     r2,r2,#1              ;207
000146  f7fffffe          BL       MicoFlashErase
00014a  2006              MOVS     r0,#6                 ;208
00014c  f7fffffe          BL       Send_Byte
000150  2043              MOVS     r0,#0x43              ;209
000152  e004              B        |L10.350|
                  |L10.340|
000154  2006              MOVS     r0,#6                 ;214
000156  f7fffffe          BL       Send_Byte
00015a  e01d              B        |L10.408|
                  |L10.348|
00015c  2006              MOVS     r0,#6                 ;229
                  |L10.350|
00015e  f7fffffe          BL       Send_Byte
000162  2601              MOVS     r6,#1                 ;241
000164  1c64              ADDS     r4,r4,#1              ;241
000166  e00f              B        |L10.392|
                  |L10.360|
000168  2018              MOVS     r0,#0x18              ;246
00016a  f7fffffe          BL       Send_Byte
00016e  2018              MOVS     r0,#0x18              ;247
000170  f7fffffe          BL       Send_Byte
000174  f8dd0428          LDR      r0,[sp,#0x428]        ;248
000178  f7fffffe          BL       MicoFlashFinalize
00017c  f06f0002          MVN      r0,#2                 ;249
000180  e76c              B        |L10.92|
                  |L10.386|
000182  2043              MOVS     r0,#0x43              ;262
                  |L10.388|
000184  f7fffffe          BL       Send_Byte
                  |L10.392|
000188  f1b90f00          CMP      r9,#0                 ;265
00018c  f43faf4c          BEQ      |L10.40|
                  |L10.400|
000190  f1bb0f00          CMP      r11,#0                ;270
000194  f43faf46          BEQ      |L10.36|
                  |L10.408|
000198  f8dd0428          LDR      r0,[sp,#0x428]        ;275
00019c  f7fffffe          BL       MicoFlashFinalize
0001a0  f8dd0418          LDR      r0,[sp,#0x418]        ;276
0001a4  e75a              B        |L10.92|
;;;278    
                          ENDP

0001a6  0000              DCW      0x0000
                  |L10.424|
                          DCD      FileName

                          AREA ||i.Ymodem_SendPacket||, CODE, READONLY, ALIGN=1

                  Ymodem_SendPacket PROC
;;;432      */
;;;433    void Ymodem_SendPacket(uint8_t *data, uint16_t length)
000000  b570              PUSH     {r4-r6,lr}
;;;434    {
000002  460d              MOV      r5,r1
000004  4606              MOV      r6,r0
;;;435      uint16_t i;
;;;436      i = 0;
000006  2400              MOVS     r4,#0
000008  e004              B        |L11.20|
                  |L11.10|
;;;437      while (i < length)
;;;438      {
;;;439        Send_Byte(data[i]);
00000a  5d30              LDRB     r0,[r6,r4]
00000c  f7fffffe          BL       Send_Byte
000010  1c64              ADDS     r4,r4,#1
;;;440        i++;
000012  b2a4              UXTH     r4,r4
                  |L11.20|
000014  42ac              CMP      r4,r5                 ;437
000016  d3f8              BCC      |L11.10|
;;;441      }
;;;442    }
000018  bd70              POP      {r4-r6,pc}
;;;443    
                          ENDP


                          AREA ||i.Ymodem_Transmit||, CODE, READONLY, ALIGN=1

                  Ymodem_Transmit PROC
;;;448      */
;;;449    uint8_t Ymodem_Transmit (mico_flash_t flash, uint32_t flashdestination, const uint8_t* sendFileName, uint32_t sizeFile)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;450    {
;;;451      uint8_t packet_data[PACKET_1K_SIZE + PACKET_OVERHEAD];
;;;452      uint8_t filename[FILE_NAME_LENGTH];
;;;453      uint8_t tempCheckSum;
;;;454      uint32_t buf_ptr;
;;;455      uint16_t tempCRC;
;;;456      uint16_t blkNumber;
;;;457      uint8_t receivedC[2], CRC16_F = 0, i;
;;;458      uint32_t errors, ackReceived, size = 0, pktSize;
;;;459    
;;;460      errors = 0;
000004  2400              MOVS     r4,#0
000006  f2ad5d14          SUB      sp,sp,#0x514          ;450
00000a  460f              MOV      r7,r1                 ;450
;;;461      ackReceived = 0;
00000c  4625              MOV      r5,r4
;;;462      for (i = 0; i < (FILE_NAME_LENGTH - 1); i++)
00000e  4620              MOV      r0,r4
000010  f20d410c          ADD      r1,sp,#0x40c          ;452
                  |L12.20|
;;;463      {
;;;464        filename[i] = sendFileName[i];
000014  5c13              LDRB     r3,[r2,r0]
000016  540b              STRB     r3,[r1,r0]
000018  1c40              ADDS     r0,r0,#1
00001a  b2c0              UXTB     r0,r0                 ;462
00001c  28ff              CMP      r0,#0xff              ;462
00001e  d3f9              BCC      |L12.20|
;;;465      }
;;;466      CRC16_F = 1;
000020  f04f0a01          MOV      r10,#1
;;;467        
;;;468      /* Prepare first block */
;;;469      Ymodem_PrepareIntialPacket(&packet_data[0], filename, &sizeFile);
000024  f50d62a4          ADD      r2,sp,#0x520
000028  a801              ADD      r0,sp,#4
00002a  f7fffffe          BL       Ymodem_PrepareIntialPacket
;;;470      
;;;471      do 
;;;472      {
;;;473        /* Send Packet */
;;;474        Ymodem_SendPacket(packet_data, PACKET_SIZE + PACKET_HEADER);
;;;475    
;;;476        /* Send CRC or Check Sum based on CRC16_F */
;;;477        if (CRC16_F)
;;;478        {
;;;479           tempCRC = Cal_CRC16(&packet_data[3], PACKET_SIZE);
;;;480           Send_Byte(tempCRC >> 8);
;;;481           Send_Byte(tempCRC & 0xFF);
;;;482        }
;;;483        else
;;;484        {
;;;485           tempCheckSum = CalChecksum (&packet_data[3], PACKET_SIZE);
;;;486           Send_Byte(tempCheckSum);
;;;487        }
;;;488      
;;;489        /* Wait for Ack and 'C' */
;;;490        if (Receive_Byte(&receivedC[0], 1000) == 0)  
00002e  f44f797a          MOV      r9,#0x3e8
                  |L12.50|
000032  2183              MOVS     r1,#0x83              ;474
000034  a801              ADD      r0,sp,#4              ;474
000036  f7fffffe          BL       Ymodem_SendPacket
00003a  f1ba0f00          CMP      r10,#0                ;477
00003e  f04f0180          MOV      r1,#0x80              ;485
000042  f10d0007          ADD      r0,sp,#7              ;485
000046  d007              BEQ      |L12.88|
000048  f7fffffe          BL       Cal_CRC16
00004c  4606              MOV      r6,r0                 ;479
00004e  0a00              LSRS     r0,r0,#8              ;480
000050  f7fffffe          BL       Send_Byte
000054  b2f0              UXTB     r0,r6                 ;481
000056  e001              B        |L12.92|
                  |L12.88|
000058  f7fffffe          BL       CalChecksum
                  |L12.92|
00005c  f7fffffe          BL       Send_Byte
000060  4649              MOV      r1,r9
000062  f20d500c          ADD      r0,sp,#0x50c
000066  f7fffffe          BL       Receive_Byte
00006a  b110              CBZ      r0,|L12.114|
00006c  1c64              ADDS     r4,r4,#1
                  |L12.110|
;;;491        {
;;;492          if (receivedC[0] == ACK)
;;;493          { 
;;;494            /* Packet transferred correctly */
;;;495            ackReceived = 1;
;;;496          }
;;;497        }
;;;498        else
;;;499        {
;;;500            errors++;
;;;501        }
;;;502      }while (!ackReceived && (errors < 0x0A));
00006e  b185              CBZ      r5,|L12.146|
000070  e003              B        |L12.122|
                  |L12.114|
000072  f89d050c          LDRB     r0,[sp,#0x50c]        ;492
000076  2806              CMP      r0,#6                 ;492
000078  d1f9              BNE      |L12.110|
                  |L12.122|
;;;503      
;;;504      if (errors >=  0x0A)
00007a  2c0a              CMP      r4,#0xa
00007c  d20b              BCS      |L12.150|
;;;505      {
;;;506        return errors;
;;;507      }
;;;508      buf_ptr = flashdestination;
;;;509      size = sizeFile;
;;;510      blkNumber = 0x01;
00007e  f04f0801          MOV      r8,#1
;;;511      /* Here 1024 bytes package is used to send the packets */
;;;512      
;;;513      Receive_Byte(&receivedC[0], 1000);
000082  4649              MOV      r1,r9
000084  f20d500c          ADD      r0,sp,#0x50c
000088  f8dd5520          LDR      r5,[sp,#0x520]
00008c  f7fffffe          BL       Receive_Byte
;;;514      /* Resend packet if NAK  for a count of 10 else end of communication */
;;;515      while (size)
000090  e050              B        |L12.308|
                  |L12.146|
000092  2c0a              CMP      r4,#0xa               ;502
000094  d3cd              BCC      |L12.50|
                  |L12.150|
000096  e0b2              B        |L12.510|
                  |L12.152|
;;;516      {
;;;517        /* Prepare next packet */
;;;518        //Ymodem_PreparePacket(buf_ptr, &packet_data[0], blkNumber, size);
;;;519        Ymodem_PreparePacket(flash, buf_ptr, &packet_data[0], blkNumber, size);
000098  9500              STR      r5,[sp,#0]
00009a  f00803ff          AND      r3,r8,#0xff
00009e  aa01              ADD      r2,sp,#4
0000a0  4639              MOV      r1,r7
0000a2  f8dd0514          LDR      r0,[sp,#0x514]
0000a6  f7fffffe          BL       Ymodem_PreparePacket
;;;520        ackReceived = 0;
0000aa  f04f0b00          MOV      r11,#0
;;;521        receivedC[0]= 0;
0000ae  f88db50c          STRB     r11,[sp,#0x50c]
;;;522        errors = 0;
0000b2  465e              MOV      r6,r11
                  |L12.180|
;;;523        do
;;;524        {
;;;525          /* Send next packet */
;;;526          if (size >= PACKET_1K_SIZE)
0000b4  f44f6480          MOV      r4,#0x400
0000b8  42a5              CMP      r5,r4
0000ba  d200              BCS      |L12.190|
;;;527          {
;;;528            pktSize = PACKET_1K_SIZE;
;;;529           
;;;530          }
;;;531          else
;;;532          {
;;;533            pktSize = PACKET_SIZE;
0000bc  2480              MOVS     r4,#0x80
                  |L12.190|
;;;534          }
;;;535          Ymodem_SendPacket(packet_data, pktSize + PACKET_HEADER);
0000be  1ce1              ADDS     r1,r4,#3
0000c0  a801              ADD      r0,sp,#4
0000c2  f7fffffe          BL       Ymodem_SendPacket
;;;536          /* Send CRC or Check Sum based on CRC16_F */
;;;537          /* Send CRC or Check Sum based on CRC16_F */
;;;538          if (CRC16_F)
0000c6  f1ba0f00          CMP      r10,#0
;;;539          {
;;;540             tempCRC = Cal_CRC16(&packet_data[3], pktSize);
;;;541             Send_Byte(tempCRC >> 8);
;;;542             Send_Byte(tempCRC & 0xFF);
;;;543          }
;;;544          else
;;;545          {
;;;546            tempCheckSum = CalChecksum (&packet_data[3], pktSize);
0000ca  4621              MOV      r1,r4
0000cc  f10d0007          ADD      r0,sp,#7
0000d0  d008              BEQ      |L12.228|
0000d2  f7fffffe          BL       Cal_CRC16
0000d6  4681              MOV      r9,r0                 ;540
0000d8  0a00              LSRS     r0,r0,#8              ;541
0000da  f7fffffe          BL       Send_Byte
0000de  f00900ff          AND      r0,r9,#0xff           ;542
0000e2  e001              B        |L12.232|
                  |L12.228|
0000e4  f7fffffe          BL       CalChecksum
                  |L12.232|
;;;547            Send_Byte(tempCheckSum);
0000e8  f7fffffe          BL       Send_Byte
;;;548          }
;;;549          
;;;550          /* Wait for Ack */
;;;551          if ((Receive_Byte(&receivedC[0], 1000) == 0)  && (receivedC[0] == ACK))
0000ec  f44f717a          MOV      r1,#0x3e8
0000f0  f20d500c          ADD      r0,sp,#0x50c
0000f4  f7fffffe          BL       Receive_Byte
0000f8  b918              CBNZ     r0,|L12.258|
0000fa  f89d050c          LDRB     r0,[sp,#0x50c]
0000fe  2806              CMP      r0,#6
000100  d004              BEQ      |L12.268|
                  |L12.258|
000102  1c76              ADDS     r6,r6,#1
;;;552          {
;;;553            ackReceived = 1;  
;;;554            if (size > pktSize)
;;;555            {
;;;556               buf_ptr += pktSize;  
;;;557               size -= pktSize;
;;;558               blkNumber++;
;;;559            }
;;;560            else
;;;561            {
;;;562              buf_ptr += pktSize;
;;;563              size = 0;
;;;564            }
;;;565          }
;;;566          else
;;;567          {
;;;568            errors++;
;;;569          }
;;;570        }while(!ackReceived && (errors < 0x0A));
000104  f1bb0f00          CMP      r11,#0
000108  d011              BEQ      |L12.302|
00010a  e009              B        |L12.288|
                  |L12.268|
00010c  42a5              CMP      r5,r4                 ;554
00010e  4427              ADD      r7,r7,r4              ;562
000110  d905              BLS      |L12.286|
000112  f1080001          ADD      r0,r8,#1              ;558
000116  1b2d              SUBS     r5,r5,r4              ;557
000118  fa1ff880          UXTH     r8,r0                 ;558
00011c  e000              B        |L12.288|
                  |L12.286|
00011e  2500              MOVS     r5,#0                 ;563
                  |L12.288|
;;;571        /* Resend packet if NAK  for a count of 10 else end of communication */
;;;572        
;;;573        if (errors >=  0x0A)
000120  2e0a              CMP      r6,#0xa
000122  d307              BCC      |L12.308|
                  |L12.292|
;;;574        {
;;;575          return errors;
000124  b2f0              UXTB     r0,r6
                  |L12.294|
;;;576        }
;;;577        
;;;578      }
;;;579      ackReceived = 0;
;;;580      receivedC[0] = 0x00;
;;;581      errors = 0;
;;;582      do 
;;;583      {
;;;584        Send_Byte(EOT);
;;;585        /* Send (EOT); */
;;;586        /* Wait for Ack */
;;;587        if ((Receive_Byte(&receivedC[0], 1000) == 0)  && receivedC[0] == ACK)
;;;588        {
;;;589          ackReceived = 1;  
;;;590        }
;;;591        else
;;;592        {
;;;593          errors++;
;;;594        }
;;;595      }while (!ackReceived && (errors < 0x0A));
;;;596        
;;;597      if (errors >=  0x0A)
;;;598      {
;;;599        return errors;
;;;600      }
;;;601      
;;;602      /* Last packet preparation */
;;;603      ackReceived = 0;
;;;604      receivedC[0] = 0x00;
;;;605      errors = 0;
;;;606    
;;;607      packet_data[0] = SOH;
;;;608      packet_data[1] = 0;
;;;609      packet_data [2] = 0xFF;
;;;610    
;;;611      for (i = PACKET_HEADER; i < (PACKET_SIZE + PACKET_HEADER); i++)
;;;612      {
;;;613         packet_data [i] = 0x00;
;;;614      }
;;;615      
;;;616      do 
;;;617      {
;;;618        /* Send Packet */
;;;619        Ymodem_SendPacket(packet_data, PACKET_SIZE + PACKET_HEADER);
;;;620    
;;;621        /* Send CRC or Check Sum based on CRC16_F */
;;;622        tempCRC = Cal_CRC16(&packet_data[3], PACKET_SIZE);
;;;623        Send_Byte(tempCRC >> 8);
;;;624        Send_Byte(tempCRC & 0xFF);
;;;625      
;;;626        /* Wait for Ack and 'C' */
;;;627        if (Receive_Byte(&receivedC[0], 1000) == 0)  
;;;628        {
;;;629          if (receivedC[0] == ACK)
;;;630          { 
;;;631            /* Packet transferred correctly */
;;;632            ackReceived = 1;
;;;633          }
;;;634        }
;;;635        else
;;;636        {
;;;637            errors++;
;;;638        }
;;;639      }while (!ackReceived && (errors < 0x0A));
;;;640    
;;;641      /* Resend packet if NAK  for a count of 10  else end of communication */
;;;642      if (errors >=  0x0A)
;;;643      {
;;;644        return errors;
;;;645      }  
;;;646      
;;;647      do 
;;;648      {
;;;649        Send_Byte(EOT);
;;;650        /* Send (EOT); */
;;;651        /* Wait for Ack */
;;;652        if ((Receive_Byte(&receivedC[0], 10) == 0)  && receivedC[0] == ACK)
;;;653        {
;;;654          ackReceived = 1;  
;;;655        }
;;;656        else
;;;657        {
;;;658          errors++;
;;;659        }
;;;660      }while (!ackReceived && (errors < 0x0A));
;;;661    
;;;662      if (errors >=  0x0A)
;;;663      {
;;;664        return errors;
;;;665      }
;;;666      
;;;667      return 0; /* file transmitted successfully */
;;;668    }
000126  f20d5d24          ADD      sp,sp,#0x524
00012a  e8bd8ff0          POP      {r4-r11,pc}
                  |L12.302|
00012e  2e0a              CMP      r6,#0xa               ;570
000130  d3c0              BCC      |L12.180|
000132  e7f7              B        |L12.292|
                  |L12.308|
000134  2d00              CMP      r5,#0                 ;515
000136  d1af              BNE      |L12.152|
000138  46a8              MOV      r8,r5                 ;580
00013a  f88d550c          STRB     r5,[sp,#0x50c]        ;580
00013e  462c              MOV      r4,r5                 ;581
000140  f44f777a          MOV      r7,#0x3e8             ;490
                  |L12.324|
000144  2004              MOVS     r0,#4                 ;584
000146  f7fffffe          BL       Send_Byte
00014a  4639              MOV      r1,r7                 ;587
00014c  f20d500c          ADD      r0,sp,#0x50c          ;587
000150  f7fffffe          BL       Receive_Byte
000154  b918              CBNZ     r0,|L12.350|
000156  f89d050c          LDRB     r0,[sp,#0x50c]        ;587
00015a  2806              CMP      r0,#6                 ;587
00015c  d001              BEQ      |L12.354|
                  |L12.350|
00015e  1c64              ADDS     r4,r4,#1              ;587
000160  b375              CBZ      r5,|L12.448|
                  |L12.354|
000162  2c0a              CMP      r4,#0xa               ;597
000164  d24b              BCS      |L12.510|
000166  2001              MOVS     r0,#1                 ;607
000168  f88d0004          STRB     r0,[sp,#4]            ;607
00016c  2500              MOVS     r5,#0                 ;603
00016e  f88d8005          STRB     r8,[sp,#5]            ;608
000172  20ff              MOVS     r0,#0xff              ;609
000174  f88d0006          STRB     r0,[sp,#6]            ;609
000178  f88d850c          STRB     r8,[sp,#0x50c]        ;604
00017c  462c              MOV      r4,r5                 ;605
00017e  2003              MOVS     r0,#3                 ;611
000180  ae01              ADD      r6,sp,#4              ;451
                  |L12.386|
000182  f8068000          STRB     r8,[r6,r0]            ;613
000186  1c40              ADDS     r0,r0,#1              ;613
000188  b2c0              UXTB     r0,r0                 ;611
00018a  2883              CMP      r0,#0x83              ;611
00018c  d3f9              BCC      |L12.386|
00018e  46b8              MOV      r8,r7                 ;490
                  |L12.400|
000190  2183              MOVS     r1,#0x83              ;619
000192  a801              ADD      r0,sp,#4              ;619
000194  f7fffffe          BL       Ymodem_SendPacket
000198  2180              MOVS     r1,#0x80              ;622
00019a  1cf0              ADDS     r0,r6,#3              ;622
00019c  f7fffffe          BL       Cal_CRC16
0001a0  4607              MOV      r7,r0                 ;622
0001a2  0a00              LSRS     r0,r0,#8              ;623
0001a4  f7fffffe          BL       Send_Byte
0001a8  b2f8              UXTB     r0,r7                 ;624
0001aa  f7fffffe          BL       Send_Byte
0001ae  4641              MOV      r1,r8                 ;627
0001b0  f20d500c          ADD      r0,sp,#0x50c          ;627
0001b4  f7fffffe          BL       Receive_Byte
0001b8  b128              CBZ      r0,|L12.454|
0001ba  1c64              ADDS     r4,r4,#1              ;627
                  |L12.444|
0001bc  b1a5              CBZ      r5,|L12.488|
0001be  e007              B        |L12.464|
                  |L12.448|
0001c0  2c0a              CMP      r4,#0xa               ;595
0001c2  d3bf              BCC      |L12.324|
0001c4  e01b              B        |L12.510|
                  |L12.454|
0001c6  f89d050c          LDRB     r0,[sp,#0x50c]        ;629
0001ca  2806              CMP      r0,#6                 ;629
0001cc  d1f6              BNE      |L12.444|
0001ce  2501              MOVS     r5,#1                 ;632
                  |L12.464|
0001d0  2c0a              CMP      r4,#0xa               ;642
0001d2  d214              BCS      |L12.510|
                  |L12.468|
0001d4  2004              MOVS     r0,#4                 ;649
0001d6  f7fffffe          BL       Send_Byte
0001da  210a              MOVS     r1,#0xa               ;652
0001dc  f20d500c          ADD      r0,sp,#0x50c          ;652
0001e0  f7fffffe          BL       Receive_Byte
0001e4  b118              CBZ      r0,|L12.494|
0001e6  e006              B        |L12.502|
                  |L12.488|
0001e8  2c0a              CMP      r4,#0xa               ;639
0001ea  d3d1              BCC      |L12.400|
0001ec  e007              B        |L12.510|
                  |L12.494|
0001ee  f89d050c          LDRB     r0,[sp,#0x50c]        ;652
0001f2  2806              CMP      r0,#6                 ;652
0001f4  d001              BEQ      |L12.506|
                  |L12.502|
0001f6  1c64              ADDS     r4,r4,#1              ;652
0001f8  b11d              CBZ      r5,|L12.514|
                  |L12.506|
0001fa  2c0a              CMP      r4,#0xa               ;662
0001fc  d304              BCC      |L12.520|
                  |L12.510|
0001fe  b2e0              UXTB     r0,r4                 ;664
000200  e791              B        |L12.294|
                  |L12.514|
000202  2c0a              CMP      r4,#0xa               ;660
000204  d3e6              BCC      |L12.468|
000206  e7fa              B        |L12.510|
                  |L12.520|
000208  2000              MOVS     r0,#0                 ;667
00020a  e78c              B        |L12.294|
;;;669    
                          ENDP

