L 1 "..\..\..\Platform\Common\Cortex-M3\STM32F2xx\STM32F2xx_Drv\STM32F2xx_StdPeriph_Driver\src\stm32f2xx_spi.c"
N/**
N  ******************************************************************************
N  * @file    stm32f2xx_spi.c
N  * @author  MCD Application Team
N  * @version V1.1.2
N  * @date    05-March-2012 
N  * @brief   This file provides firmware functions to manage the following 
N  *          functionalities of the Serial peripheral interface (SPI):           
N  *           - Initialization and Configuration
N  *           - Data transfers functions
N  *           - Hardware CRC Calculation
N  *           - DMA transfers management
N  *           - Interrupts and flags management 
N  *           
N  *  @verbatim
N  *          
N  *                    
N  *          ===================================================================
N  *                                 How to use this driver
N  *          ===================================================================
N  *          1. Enable peripheral clock using the following functions 
N  *             RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE) for SPI1
N  *             RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE) for SPI2
N  *             RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE) for SPI3.
N  *
N  *          2. Enable SCK, MOSI, MISO and NSS GPIO clocks using RCC_AHB1PeriphClockCmd()
N  *             function.
N  *             In I2S mode, if an external clock source is used then the I2S CKIN pin GPIO
N  *             clock should also be enabled.
N  *
N  *          3. Peripherals alternate function: 
N  *                 - Connect the pin to the desired peripherals' Alternate 
N  *                   Function (AF) using GPIO_PinAFConfig() function
N  *                 - Configure the desired pin in alternate function by:
N  *                   GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
N  *                 - Select the type, pull-up/pull-down and output speed via 
N  *                   GPIO_PuPd, GPIO_OType and GPIO_Speed members
N  *                 - Call GPIO_Init() function
N  *              In I2S mode, if an external clock source is used then the I2S CKIN pin
N  *              should be also configured in Alternate function Push-pull pull-up mode. 
N  *        
N  *          4. Program the Polarity, Phase, First Data, Baud Rate Prescaler, Slave 
N  *             Management, Peripheral Mode and CRC Polynomial values using the SPI_Init()
N  *             function.
N  *             In I2S mode, program the Mode, Standard, Data Format, MCLK Output, Audio 
N  *             frequency and Polarity using I2S_Init() function.
N  *             For I2S mode, make sure that either:
N  *              - I2S PLL is configured using the functions RCC_I2SCLKConfig(RCC_I2S2CLKSource_PLLI2S), 
N  *                RCC_PLLI2SCmd(ENABLE) and RCC_GetFlagStatus(RCC_FLAG_PLLI2SRDY).
N  *              or 
N  *              - External clock source is configured using the function 
N  *                RCC_I2SCLKConfig(RCC_I2S2CLKSource_Ext) and after setting correctly the define constant
N  *                I2S_EXTERNAL_CLOCK_VAL in the stm32f2xx_conf.h file. 
N  *
N  *          5. Enable the NVIC and the corresponding interrupt using the function 
N  *             SPI_ITConfig() if you need to use interrupt mode. 
N  *
N  *          6. When using the DMA mode 
N  *                   - Configure the DMA using DMA_Init() function
N  *                   - Active the needed channel Request using SPI_I2S_DMACmd() function
N  * 
N  *          7. Enable the SPI using the SPI_Cmd() function or enable the I2S using
N  *             I2S_Cmd().
N  * 
N  *          8. Enable the DMA using the DMA_Cmd() function when using DMA mode. 
N  *
N  *          9. Optionally, you can enable/configure the following parameters without
N  *             re-initialization (i.e there is no need to call again SPI_Init() function):
N  *              - When bidirectional mode (SPI_Direction_1Line_Rx or SPI_Direction_1Line_Tx)
N  *                is programmed as Data direction parameter using the SPI_Init() function
N  *                it can be possible to switch between SPI_Direction_Tx or SPI_Direction_Rx
N  *                using the SPI_BiDirectionalLineConfig() function.
N  *              - When SPI_NSS_Soft is selected as Slave Select Management parameter 
N  *                using the SPI_Init() function it can be possible to manage the 
N  *                NSS internal signal using the SPI_NSSInternalSoftwareConfig() function.
N  *              - Reconfigure the data size using the SPI_DataSizeConfig() function  
N  *              - Enable or disable the SS output using the SPI_SSOutputCmd() function  
N  *          
N  *          10. To use the CRC Hardware calculation feature refer to the Peripheral 
N  *              CRC hardware Calculation subsection.
N  *   
N  *
N  * @note    This driver supports only the I2S clock scheme available in Silicon
N  *          RevisionB and RevisionY.
N  *     
N  * @note    In I2S mode: if an external clock is used as source clock for the I2S,  
N  *          then the define I2S_EXTERNAL_CLOCK_VAL in file stm32f2xx_conf.h should 
N  *          be enabled and set to the value of the source clock frequency (in Hz).
N  * 
N  * @note    In SPI mode: To use the SPI TI mode, call the function SPI_TIModeCmd() 
N  *          just after calling the function SPI_Init().
N  *
N  *  @endverbatim  
N  *                                  
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
N  *
N  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
N  * You may not use this file except in compliance with the License.
N  * You may obtain a copy of the License at:
N  *
N  *        http://www.st.com/software_license_agreement_liberty_v2
N  *
N  * Unless required by applicable law or agreed to in writing, software 
N  * distributed under the License is distributed on an "AS IS" BASIS, 
N  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N  * See the License for the specific language governing permissions and
N  * limitations under the License.
N  *
N  ******************************************************************************
N  */
N
N/* Includes ------------------------------------------------------------------*/
C "..\..\..\Platform\Common\Cortex-M3\STM32F2xx\STM32F2xx_Drv\STM32F2xx_StdPeriph_Driver\src\stm32f2xx_spi.c" 116 27 cannot open source input file "stm32f2xx_spi.h": No such file or directory
N#include "stm32f2xx_spi.h"
