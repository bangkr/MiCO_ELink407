; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\..\..\build\bootloader\emw3162\obj_rvmdk\ringbufferutils.o --asm_dir=..\..\..\Build\Bootloader\EMW3162\List_RVMDK\ --list_dir=..\..\..\Build\Bootloader\EMW3162\List_RVMDK\ --depend=..\..\..\build\bootloader\emw3162\obj_rvmdk\ringbufferutils.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=1,1293 -I..\..\..\include -I..\..\..\Platform\Common\Cortex-M4\CMSIS -I..\..\..\Platform\Common\Cortex-M4\STM32F4xx\STM32F4xx_Drv -I..\..\..\Platform\Common\Cortex-M4\STM32F4xx -I..\..\..\Platform\Common\Cortex-M4 -I..\..\..\Platform\Common\Cortex-M4\STM32F4xx\STM32F4xx_Drv\STM32F4xx_StdPeriph_Driver\inc -I..\..\..\Bootloader -I..\..\..\MICO -I..\..\..\Platform\EMW3162 -I..\..\..\External -I..\..\..\Library\support -I..\..\..\Platform\include -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.1\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\1.0.6\Device\Include -D__MICROLIB -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DBOOTLOADER -DSIZE_OPTIMIZE ..\..\..\Library\support\RingBufferUtils.c]
                          THUMB

                          AREA ||i.ring_buffer_consume||, CODE, READONLY, ALIGN=1

                  ring_buffer_consume PROC
;;;65     
;;;66     uint8_t ring_buffer_consume( ring_buffer_t* ring_buffer, uint32_t bytes_consumed )
000000  6842              LDR      r2,[r0,#4]
;;;67     {
;;;68       ring_buffer->head = (ring_buffer->head + bytes_consumed) % ring_buffer->size;
000002  4411              ADD      r1,r1,r2
000004  6802              LDR      r2,[r0,#0]
000006  fbb1f3f2          UDIV     r3,r1,r2
00000a  fb021113          MLS      r1,r2,r3,r1
;;;69       return 0;
00000e  6041              STR      r1,[r0,#4]
000010  2000              MOVS     r0,#0
;;;70     }
000012  4770              BX       lr
;;;71     
                          ENDP


                          AREA ||i.ring_buffer_deinit||, CODE, READONLY, ALIGN=1

                  ring_buffer_deinit PROC
;;;37     
;;;38     OSStatus ring_buffer_deinit( ring_buffer_t* ring_buffer )
000000  2000              MOVS     r0,#0
;;;39     {
;;;40         UNUSED_PARAMETER(ring_buffer);
;;;41         return kNoErr;
;;;42     }
000002  4770              BX       lr
;;;43     
                          ENDP


                          AREA ||i.ring_buffer_free_space||, CODE, READONLY, ALIGN=1

                  ring_buffer_free_space PROC
;;;43     
;;;44     uint32_t ring_buffer_free_space( ring_buffer_t* ring_buffer )
000000  6882              LDR      r2,[r0,#8]
;;;45     {
;;;46       uint32_t tail_to_end = ring_buffer->size - ring_buffer->tail;
000002  6801              LDR      r1,[r0,#0]
;;;47       return ((tail_to_end + ring_buffer->head) % ring_buffer->size);
000004  6840              LDR      r0,[r0,#4]
000006  1a8a              SUBS     r2,r1,r2              ;46
000008  4410              ADD      r0,r0,r2
00000a  fbb0f2f1          UDIV     r2,r0,r1
00000e  fb010012          MLS      r0,r1,r2,r0
;;;48     }
000012  4770              BX       lr
;;;49     
                          ENDP


                          AREA ||i.ring_buffer_get_data||, CODE, READONLY, ALIGN=1

                  ring_buffer_get_data PROC
;;;55     
;;;56     uint8_t ring_buffer_get_data( ring_buffer_t* ring_buffer, uint8_t** data, uint32_t* contiguous_bytes )
000000  b530              PUSH     {r4,r5,lr}
;;;57     {
000002  e9d03400          LDRD     r3,r4,[r0,#0]
;;;58       uint32_t head_to_end = ring_buffer->size - ring_buffer->head;
;;;59       
;;;60       *data = &(ring_buffer->buffer[ring_buffer->head]);
000006  68c5              LDR      r5,[r0,#0xc]
000008  1b1b              SUBS     r3,r3,r4              ;58
00000a  442c              ADD      r4,r4,r5
;;;61       
;;;62       *contiguous_bytes = MIN(head_to_end, (head_to_end + ring_buffer->tail) % ring_buffer->size);
00000c  600c              STR      r4,[r1,#0]
00000e  6881              LDR      r1,[r0,#8]
000010  6800              LDR      r0,[r0,#0]
000012  4419              ADD      r1,r1,r3
000014  fbb1f4f0          UDIV     r4,r1,r0
000018  fb001014          MLS      r0,r0,r4,r1
00001c  4298              CMP      r0,r3
00001e  d800              BHI      |L4.34|
000020  4603              MOV      r3,r0
                  |L4.34|
;;;63       return 0;
000022  2000              MOVS     r0,#0
000024  6013              STR      r3,[r2,#0]
;;;64     }
000026  bd30              POP      {r4,r5,pc}
;;;65     
                          ENDP


                          AREA ||i.ring_buffer_init||, CODE, READONLY, ALIGN=1

                  ring_buffer_init PROC
;;;28     
;;;29     OSStatus ring_buffer_init( ring_buffer_t* ring_buffer, uint8_t* buffer, uint32_t size )
000000  60c1              STR      r1,[r0,#0xc]
;;;30     {
;;;31         ring_buffer->buffer     = (uint8_t*)buffer;
;;;32         ring_buffer->size       = size;
;;;33         ring_buffer->head       = 0;
000002  2100              MOVS     r1,#0
000004  e9c02100          STRD     r2,r1,[r0,#0]
;;;34         ring_buffer->tail       = 0;
;;;35         return kNoErr;
000008  6081              STR      r1,[r0,#8]
00000a  4608              MOV      r0,r1
;;;36     }
00000c  4770              BX       lr
;;;37     
                          ENDP


                          AREA ||i.ring_buffer_used_space||, CODE, READONLY, ALIGN=1

                  ring_buffer_used_space PROC
;;;49     
;;;50     uint32_t ring_buffer_used_space( ring_buffer_t* ring_buffer )
000000  e9d01200          LDRD     r1,r2,[r0,#0]
;;;51     {
;;;52       uint32_t head_to_end = ring_buffer->size - ring_buffer->head;
;;;53       return ((head_to_end + ring_buffer->tail) % ring_buffer->size);
000004  6880              LDR      r0,[r0,#8]
000006  1a8a              SUBS     r2,r1,r2              ;52
000008  4410              ADD      r0,r0,r2
00000a  fbb0f2f1          UDIV     r2,r0,r1
00000e  fb010012          MLS      r0,r1,r2,r0
;;;54     }
000012  4770              BX       lr
;;;55     
                          ENDP


                          AREA ||i.ring_buffer_write||, CODE, READONLY, ALIGN=1

                  ring_buffer_write PROC
;;;71     
;;;72     uint32_t ring_buffer_write( ring_buffer_t* ring_buffer, const uint8_t* data, uint32_t data_length )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;73     {
000004  4604              MOV      r4,r0
;;;74       uint32_t tail_to_end = ring_buffer->size - ring_buffer->tail;
000006  6806              LDR      r6,[r0,#0]
000008  460f              MOV      r7,r1                 ;73
00000a  6880              LDR      r0,[r0,#8]
;;;75       
;;;76       /* Calculate the maximum amount we can copy */
;;;77       uint32_t amount_to_copy = MIN(data_length, (ring_buffer->tail == ring_buffer->head) ? ring_buffer->size : (tail_to_end + ring_buffer->head) % ring_buffer->size);
00000c  6861              LDR      r1,[r4,#4]
00000e  1a35              SUBS     r5,r6,r0              ;74
000010  4288              CMP      r0,r1
000012  d101              BNE      |L7.24|
000014  4633              MOV      r3,r6                 ;73
000016  e004              B        |L7.34|
                  |L7.24|
000018  194b              ADDS     r3,r1,r5
00001a  fbb3fcf6          UDIV     r12,r3,r6
00001e  fb06331c          MLS      r3,r6,r12,r3
                  |L7.34|
000022  4293              CMP      r3,r2
000024  d901              BLS      |L7.42|
000026  4616              MOV      r6,r2
000028  e006              B        |L7.56|
                  |L7.42|
00002a  4288              CMP      r0,r1
00002c  d004              BEQ      |L7.56|
00002e  4429              ADD      r1,r1,r5
000030  fbb1f2f6          UDIV     r2,r1,r6
000034  fb061612          MLS      r6,r6,r2,r1
                  |L7.56|
;;;78       
;;;79       /* Copy as much as we can until we fall off the end of the buffer */
;;;80       memcpy(&ring_buffer->buffer[ring_buffer->tail], data, MIN(amount_to_copy, tail_to_end));
000038  68e1              LDR      r1,[r4,#0xc]
00003a  42ae              CMP      r6,r5
00003c  4408              ADD      r0,r0,r1
00003e  d201              BCS      |L7.68|
000040  4632              MOV      r2,r6
000042  e000              B        |L7.70|
                  |L7.68|
000044  462a              MOV      r2,r5
                  |L7.70|
000046  4639              MOV      r1,r7
000048  f7fffffe          BL       __aeabi_memcpy
;;;81       
;;;82       /* Check if we have more to copy to the front of the buffer */
;;;83       if (tail_to_end < amount_to_copy)
00004c  42b5              CMP      r5,r6
00004e  d204              BCS      |L7.90|
;;;84       {
;;;85         memcpy(ring_buffer->buffer, data + tail_to_end, amount_to_copy - tail_to_end);
000050  1b72              SUBS     r2,r6,r5
000052  1979              ADDS     r1,r7,r5
000054  68e0              LDR      r0,[r4,#0xc]
000056  f7fffffe          BL       __aeabi_memcpy
                  |L7.90|
;;;86       }
;;;87       
;;;88       /* Update the tail */
;;;89       ring_buffer->tail = (ring_buffer->tail + amount_to_copy) % ring_buffer->size;
00005a  68a0              LDR      r0,[r4,#8]
00005c  6821              LDR      r1,[r4,#0]
00005e  4430              ADD      r0,r0,r6
000060  fbb0f2f1          UDIV     r2,r0,r1
000064  fb010012          MLS      r0,r1,r2,r0
;;;90       
;;;91       return amount_to_copy;
000068  60a0              STR      r0,[r4,#8]
00006a  4630              MOV      r0,r6
;;;92     }
00006c  e8bd81f0          POP      {r4-r8,pc}
                          ENDP

