; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\..\..\build\bootloader\emw3162\obj_rvmdk\update_for_ota.o --asm_dir=..\..\..\Build\Bootloader\EMW3162\List_RVMDK\ --list_dir=..\..\..\Build\Bootloader\EMW3162\List_RVMDK\ --depend=..\..\..\build\bootloader\emw3162\obj_rvmdk\update_for_ota.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=1,1293 -I..\..\..\include -I..\..\..\Platform\Common\Cortex-M4\CMSIS -I..\..\..\Platform\Common\Cortex-M4\STM32F4xx\STM32F4xx_Drv -I..\..\..\Platform\Common\Cortex-M4\STM32F4xx -I..\..\..\Platform\Common\Cortex-M4 -I..\..\..\Platform\Common\Cortex-M4\STM32F4xx\STM32F4xx_Drv\STM32F4xx_StdPeriph_Driver\inc -I..\..\..\Bootloader -I..\..\..\MICO -I..\..\..\Platform\EMW3162 -I..\..\..\External -I..\..\..\Library\support -I..\..\..\Platform\include -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.1\CMSIS\Include -Id:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\1.0.6\Device\Include -D__MICROLIB -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DBOOTLOADER -DSIZE_OPTIMIZE ..\..\..\Bootloader\Update_for_OTA.c]
                          THUMB

                          AREA ||i.update||, CODE, READONLY, ALIGN=2

                  update PROC
;;;120    
;;;121    OSStatus update(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;122    {
000004  b089              SUB      sp,sp,#0x24
;;;123      boot_table_t updateLog;
;;;124      uint32_t i, j, size;
;;;125      uint32_t updateStartAddress;
;;;126      uint32_t destStartAddress_tmp;
;;;127      uint32_t paraStartAddress;
;;;128      OSStatus err = kNoErr;
;;;129     
;;;130      MicoFlashInitialize( (mico_flash_t)MICO_FLASH_FOR_UPDATE );
000006  2001              MOVS     r0,#1
000008  f7fffffe          BL       MicoFlashInitialize
;;;131      memset(data, 0xFF, SizePerRW);
00000c  f44f5780          MOV      r7,#0x1000
000010  22ff              MOVS     r2,#0xff
000012  4639              MOV      r1,r7
000014  487a              LDR      r0,|L1.512|
000016  f7fffffe          BL       __aeabi_memset
;;;132      memset(newData, 0xFF, SizePerRW);
00001a  22ff              MOVS     r2,#0xff
00001c  4639              MOV      r1,r7
00001e  4879              LDR      r0,|L1.516|
000020  f7fffffe          BL       __aeabi_memset
;;;133      memset(paraSaveInRam, 0xFF, PARA_FLASH_SIZE);
000024  22ff              MOVS     r2,#0xff
000026  00b9              LSLS     r1,r7,#2
000028  4877              LDR      r0,|L1.520|
00002a  f7fffffe          BL       __aeabi_memset
;;;134      
;;;135      updateStartAddress = UPDATE_START_ADDRESS;
;;;136      
;;;137      paraStartAddress = PARA_START_ADDRESS;  
00002e  f8dfa1e0          LDR      r10,|L1.528|
000032  f8df81d8          LDR      r8,|L1.524|
;;;138      err = MicoFlashRead(MICO_FLASH_FOR_PARA, &paraStartAddress, (uint8_t *)&updateLog, sizeof(boot_table_t));
000036  e9cd8a07          STRD     r8,r10,[sp,#0x1c]
00003a  2318              MOVS     r3,#0x18
00003c  466a              MOV      r2,sp
00003e  a908              ADD      r1,sp,#0x20
000040  2001              MOVS     r0,#1
000042  f7fffffe          BL       MicoFlashRead
;;;139      require_noerr(err, exit);
;;;140    
;;;141      /*Not a correct record*/
;;;142      if(updateLogCheck(&updateLog) != Log_NeedUpdate){
;;;143        size = UPDATE_FLASH_SIZE/SizePerRW;
;;;144        for(i = 0; i <= size; i++){
;;;145          if( i==size ){
;;;146            err = MicoFlashRead(MICO_FLASH_FOR_UPDATE, &updateStartAddress, data , UPDATE_FLASH_SIZE%SizePerRW);
;;;147            require_noerr(err, exit);
;;;148          }
;;;149          else{
;;;150            err = MicoFlashRead(MICO_FLASH_FOR_UPDATE, &updateStartAddress, data , SizePerRW);
;;;151            require_noerr(err, exit);
;;;152          }
;;;153          
;;;154          for(j=0; j<SizePerRW; j++){
;;;155            if(data[j] != 0xFF){
;;;156              update_log("Update data need to be erased");
;;;157              err = MicoFlashInitialize( MICO_FLASH_FOR_UPDATE );
;;;158              require_noerr(err, exit);
;;;159              err = MicoFlashErase( MICO_FLASH_FOR_UPDATE, UPDATE_START_ADDRESS, UPDATE_END_ADDRESS );
;;;160              require_noerr(err, exit);
;;;161              err = MicoFlashFinalize( MICO_FLASH_FOR_UPDATE );
;;;162              require_noerr(err, exit);
;;;163              break;
;;;164            }
;;;165          }
;;;166        }
;;;167        goto exit;
;;;168      }
;;;169      
;;;170      update_log("Write OTA data to destination, type:%d, from 0x%08x to 0x%08x, length 0x%x", destFlashType, destStartAddress, destEndAddress, updateLog.length);
;;;171      
;;;172      destStartAddress_tmp = destStartAddress;
000046  f8df91cc          LDR      r9,|L1.532|
00004a  0004              MOVS     r4,r0                 ;138
                  |L1.76|
00004c  d12e              BNE      |L1.172|
00004e  4668              MOV      r0,sp                 ;142
000050  f7fffffe          BL       updateLogCheck
000054  2802              CMP      r0,#2                 ;142
000056  d02a              BEQ      |L1.174|
000058  2660              MOVS     r6,#0x60              ;143
00005a  2500              MOVS     r5,#0                 ;144
                  |L1.92|
00005c  42b5              CMP      r5,r6                 ;145
00005e  d101              BNE      |L1.100|
000060  2300              MOVS     r3,#0                 ;146
000062  e000              B        |L1.102|
                  |L1.100|
000064  463b              MOV      r3,r7                 ;150
                  |L1.102|
000066  4a66              LDR      r2,|L1.512|
000068  a907              ADD      r1,sp,#0x1c           ;150
00006a  2001              MOVS     r0,#1                 ;150
00006c  f7fffffe          BL       MicoFlashRead
000070  0004              MOVS     r4,r0                 ;150
000072  d1eb              BNE      |L1.76|
000074  4962              LDR      r1,|L1.512|
                  |L1.118|
000076  5c0a              LDRB     r2,[r1,r0]            ;155
000078  2aff              CMP      r2,#0xff              ;155
00007a  d011              BEQ      |L1.160|
00007c  2001              MOVS     r0,#1                 ;157
00007e  f7fffffe          BL       MicoFlashInitialize
000082  0004              MOVS     r4,r0                 ;157
000084  d1e2              BNE      |L1.76|
000086  4a64              LDR      r2,|L1.536|
000088  4641              MOV      r1,r8                 ;159
00008a  2001              MOVS     r0,#1                 ;159
00008c  f7fffffe          BL       MicoFlashErase
000090  0004              MOVS     r4,r0                 ;159
000092  d10b              BNE      |L1.172|
000094  2001              MOVS     r0,#1                 ;161
000096  f7fffffe          BL       MicoFlashFinalize
00009a  0004              MOVS     r4,r0                 ;161
00009c  d106              BNE      |L1.172|
00009e  e002              B        |L1.166|
                  |L1.160|
0000a0  1c40              ADDS     r0,r0,#1              ;162
0000a2  42b8              CMP      r0,r7                 ;154
0000a4  d3e7              BCC      |L1.118|
                  |L1.166|
0000a6  1c6d              ADDS     r5,r5,#1              ;154
0000a8  42b5              CMP      r5,r6                 ;144
0000aa  d9d7              BLS      |L1.92|
                  |L1.172|
0000ac  e09c              B        |L1.488|
                  |L1.174|
0000ae  f8d90004          LDR      r0,[r9,#4]  ; destStartAddress
;;;173      updateStartAddress = UPDATE_START_ADDRESS;
0000b2  9006              STR      r0,[sp,#0x18]
0000b4  4855              LDR      r0,|L1.524|
;;;174      
;;;175      err = MicoFlashInitialize( destFlashType );
0000b6  9007              STR      r0,[sp,#0x1c]
0000b8  464e              MOV      r6,r9                 ;172
0000ba  f8990000          LDRB     r0,[r9,#0]  ; destFlashType
0000be  f7fffffe          BL       MicoFlashInitialize
0000c2  0004              MOVS     r4,r0
;;;176      require_noerr(err, exit);
0000c4  d163              BNE      |L1.398|
0000c6  e9d61201          LDRD     r1,r2,[r6,#4]
;;;177      err = MicoFlashErase( destFlashType, destStartAddress, destEndAddress );
0000ca  7830              LDRB     r0,[r6,#0]  ; destFlashType
0000cc  f7fffffe          BL       MicoFlashErase
0000d0  0004              MOVS     r4,r0
;;;178      require_noerr(err, exit);
0000d2  d15c              BNE      |L1.398|
;;;179      size = (updateLog.length)/SizePerRW;
0000d4  9801              LDR      r0,[sp,#4]
;;;180      for(i = 0; i <= size; i++){
0000d6  2500              MOVS     r5,#0
0000d8  ea4f3810          LSR      r8,r0,#12             ;179
;;;181        if( i==size && (updateLog.length)%SizePerRW){
;;;182          err = MicoFlashRead(MICO_FLASH_FOR_UPDATE, &updateStartAddress, data , (updateLog.length)%SizePerRW);
;;;183          require_noerr(err, exit);
;;;184          err = MicoFlashInitialize( destFlashType );
;;;185          require_noerr(err, exit);
;;;186          err = MicoFlashWrite(destFlashType, &destStartAddress_tmp, data, (updateLog.length)%SizePerRW);
;;;187          require_noerr(err, exit);
;;;188          destStartAddress_tmp -= (updateLog.length)%SizePerRW;
;;;189          err = MicoFlashRead(destFlashType, &destStartAddress_tmp, newData , (updateLog.length)%SizePerRW);
;;;190          require_noerr(err, exit);
;;;191          err = memcmp(data, newData, (updateLog.length)%SizePerRW);
;;;192          require_noerr_action(err, exit, err = kWriteErr);
0000dc  f8dfb13c          LDR      r11,|L1.540|
0000e0  e057              B        |L1.402|
                  |L1.226|
0000e2  d12c              BNE      |L1.318|
0000e4  9801              LDR      r0,[sp,#4]            ;181
0000e6  0500              LSLS     r0,r0,#20             ;181
0000e8  d029              BEQ      |L1.318|
0000ea  9801              LDR      r0,[sp,#4]            ;182
0000ec  4a44              LDR      r2,|L1.512|
0000ee  f3c0030b          UBFX     r3,r0,#0,#12          ;182
0000f2  a907              ADD      r1,sp,#0x1c           ;182
0000f4  2001              MOVS     r0,#1                 ;182
0000f6  f7fffffe          BL       MicoFlashRead
0000fa  0004              MOVS     r4,r0                 ;182
0000fc  d174              BNE      |L1.488|
0000fe  7830              LDRB     r0,[r6,#0]            ;184  ; destFlashType
000100  f7fffffe          BL       MicoFlashInitialize
000104  0004              MOVS     r4,r0                 ;184
000106  d16f              BNE      |L1.488|
000108  9801              LDR      r0,[sp,#4]            ;186
00010a  4a3d              LDR      r2,|L1.512|
00010c  f3c0030b          UBFX     r3,r0,#0,#12          ;186
000110  a906              ADD      r1,sp,#0x18           ;186
000112  7830              LDRB     r0,[r6,#0]            ;186  ; destFlashType
000114  f7fffffe          BL       MicoFlashWrite
000118  0004              MOVS     r4,r0                 ;186
00011a  d165              BNE      |L1.488|
00011c  9801              LDR      r0,[sp,#4]            ;188
00011e  4a39              LDR      r2,|L1.516|
000120  f3c0030b          UBFX     r3,r0,#0,#12          ;188
000124  9806              LDR      r0,[sp,#0x18]         ;188
000126  a906              ADD      r1,sp,#0x18           ;189
000128  1ac0              SUBS     r0,r0,r3              ;188
00012a  9006              STR      r0,[sp,#0x18]         ;189
00012c  7830              LDRB     r0,[r6,#0]            ;189  ; destFlashType
00012e  f7fffffe          BL       MicoFlashRead
000132  0004              MOVS     r4,r0                 ;189
000134  d158              BNE      |L1.488|
000136  9801              LDR      r0,[sp,#4]            ;191
000138  f3c0020b          UBFX     r2,r0,#0,#12          ;191
00013c  e021              B        |L1.386|
                  |L1.318|
;;;193        }
;;;194        else{
;;;195          err = MicoFlashRead(MICO_FLASH_FOR_UPDATE, &updateStartAddress, data , SizePerRW);
00013e  463b              MOV      r3,r7
000140  4a2f              LDR      r2,|L1.512|
000142  a907              ADD      r1,sp,#0x1c
000144  2001              MOVS     r0,#1
000146  f7fffffe          BL       MicoFlashRead
00014a  0004              MOVS     r4,r0
;;;196          require_noerr(err, exit);
00014c  d14c              BNE      |L1.488|
;;;197          err = MicoFlashInitialize( destFlashType );
00014e  7830              LDRB     r0,[r6,#0]  ; destFlashType
000150  f7fffffe          BL       MicoFlashInitialize
000154  0004              MOVS     r4,r0
;;;198          require_noerr(err, exit);
000156  d147              BNE      |L1.488|
;;;199          err = MicoFlashWrite(destFlashType, &destStartAddress_tmp, data, SizePerRW);
000158  463b              MOV      r3,r7
00015a  4a29              LDR      r2,|L1.512|
00015c  a906              ADD      r1,sp,#0x18
00015e  7830              LDRB     r0,[r6,#0]  ; destFlashType
000160  f7fffffe          BL       MicoFlashWrite
000164  0004              MOVS     r4,r0
;;;200          require_noerr(err, exit);
000166  d13f              BNE      |L1.488|
;;;201          destStartAddress_tmp -= SizePerRW;
000168  9806              LDR      r0,[sp,#0x18]
;;;202          err = MicoFlashRead(destFlashType, &destStartAddress_tmp, newData , SizePerRW);
00016a  463b              MOV      r3,r7
00016c  f5a05080          SUB      r0,r0,#0x1000         ;201
000170  9006              STR      r0,[sp,#0x18]
000172  4a24              LDR      r2,|L1.516|
000174  a906              ADD      r1,sp,#0x18
000176  7830              LDRB     r0,[r6,#0]  ; destFlashType
000178  f7fffffe          BL       MicoFlashRead
00017c  0004              MOVS     r4,r0
;;;203          require_noerr(err, exit);
00017e  d133              BNE      |L1.488|
;;;204          err = memcmp(data, newData, SizePerRW);
000180  463a              MOV      r2,r7
                  |L1.386|
000182  4920              LDR      r1,|L1.516|
000184  481e              LDR      r0,|L1.512|
000186  f7fffffe          BL       memcmp
00018a  b108              CBZ      r0,|L1.400|
;;;205          require_noerr_action(err, exit, err = kWriteErr); 
00018c  465c              MOV      r4,r11
                  |L1.398|
00018e  e02b              B        |L1.488|
                  |L1.400|
000190  1c6d              ADDS     r5,r5,#1
                  |L1.402|
000192  4545              CMP      r5,r8                 ;180
000194  d9a5              BLS      |L1.226|
;;;206        }
;;;207      } 
;;;208      update_log("Update start to clear data...");
;;;209        
;;;210      paraStartAddress = PARA_START_ADDRESS;
;;;211      err = MicoFlashRead(MICO_FLASH_FOR_PARA, &paraStartAddress, paraSaveInRam, PARA_FLASH_SIZE);
000196  f44f4680          MOV      r6,#0x4000
00019a  4655              MOV      r5,r10                ;210
00019c  4633              MOV      r3,r6
00019e  4a1a              LDR      r2,|L1.520|
0001a0  a908              ADD      r1,sp,#0x20
0001a2  f04f0001          MOV      r0,#1
0001a6  f8cda020          STR      r10,[sp,#0x20]
0001aa  f7fffffe          BL       MicoFlashRead
0001ae  0004              MOVS     r4,r0
;;;212      require_noerr(err, exit);
0001b0  d11a              BNE      |L1.488|
;;;213      memset(paraSaveInRam, 0xff, sizeof(boot_table_t));
0001b2  22ff              MOVS     r2,#0xff
0001b4  2118              MOVS     r1,#0x18
0001b6  4814              LDR      r0,|L1.520|
0001b8  f7fffffe          BL       __aeabi_memset
;;;214      
;;;215      err = MicoFlashErase(MICO_FLASH_FOR_PARA, PARA_START_ADDRESS, PARA_END_ADDRESS);
0001bc  4a18              LDR      r2,|L1.544|
0001be  4629              MOV      r1,r5
0001c0  2001              MOVS     r0,#1
0001c2  f7fffffe          BL       MicoFlashErase
0001c6  0004              MOVS     r4,r0
;;;216      require_noerr(err, exit);
0001c8  d10e              BNE      |L1.488|
;;;217    
;;;218      paraStartAddress = PARA_START_ADDRESS;
;;;219      err = MicoFlashWrite(MICO_FLASH_FOR_PARA, &paraStartAddress, paraSaveInRam, PARA_FLASH_SIZE);
0001ca  4633              MOV      r3,r6
0001cc  4a0e              LDR      r2,|L1.520|
0001ce  a908              ADD      r1,sp,#0x20
0001d0  2001              MOVS     r0,#1
0001d2  9508              STR      r5,[sp,#0x20]
0001d4  f7fffffe          BL       MicoFlashWrite
0001d8  0004              MOVS     r4,r0
;;;220      require_noerr(err, exit);
0001da  d105              BNE      |L1.488|
;;;221      
;;;222      err = MicoFlashErase(MICO_FLASH_FOR_UPDATE, UPDATE_START_ADDRESS, UPDATE_END_ADDRESS);
0001dc  4a0e              LDR      r2,|L1.536|
0001de  490b              LDR      r1,|L1.524|
0001e0  2001              MOVS     r0,#1
0001e2  f7fffffe          BL       MicoFlashErase
0001e6  4604              MOV      r4,r0
                  |L1.488|
;;;223      require_noerr(err, exit);
;;;224      update_log("Update success");
;;;225      
;;;226    exit:
;;;227      if(err != kNoErr) update_log("Update exit with err = %d", err);
;;;228      MicoFlashFinalize(MICO_FLASH_FOR_UPDATE);
0001e8  2001              MOVS     r0,#1
0001ea  f7fffffe          BL       MicoFlashFinalize
;;;229      MicoFlashFinalize(destFlashType);
0001ee  f8990000          LDRB     r0,[r9,#0]  ; destFlashType
0001f2  f7fffffe          BL       MicoFlashFinalize
;;;230      return err;
;;;231    }
0001f6  b009              ADD      sp,sp,#0x24
0001f8  4620              MOV      r0,r4                 ;230
0001fa  e8bd8ff0          POP      {r4-r11,pc}
;;;232    #endif
                          ENDP

0001fe  0000              DCW      0x0000
                  |L1.512|
                          DCD      ||.bss||
                  |L1.516|
                          DCD      ||.bss||+0x1000
                  |L1.520|
                          DCD      ||.bss||+0x2000
                  |L1.524|
                          DCD      0x08060000
                  |L1.528|
                          DCD      0x08004000
                  |L1.532|
                          DCD      ||.data||
                  |L1.536|
                          DCD      0x080bffff
                  |L1.540|
                          DCD      0xffffe5a5
                  |L1.544|
                          DCD      0x08007fff

                          AREA ||i.updateLogCheck||, CODE, READONLY, ALIGN=2

                  updateLogCheck PROC
;;;75     #else
;;;76     Log_Status updateLogCheck(boot_table_t *updateLog)
000000  2100              MOVS     r1,#0
                  |L2.2|
;;;77     {
;;;78       uint32_t i;
;;;79       
;;;80       for(i=0; i<sizeof(boot_table_t); i++){
;;;81         if(*((uint8_t *)updateLog + i) != 0xff)
000002  5c42              LDRB     r2,[r0,r1]
000004  2aff              CMP      r2,#0xff
000006  d102              BNE      |L2.14|
000008  1c49              ADDS     r1,r1,#1
00000a  2918              CMP      r1,#0x18              ;80
00000c  d3f9              BCC      |L2.2|
                  |L2.14|
;;;82           break;
;;;83       }
;;;84       if(i == sizeof(boot_table_t))
00000e  2918              CMP      r1,#0x18
000010  d004              BEQ      |L2.28|
;;;85         return Log_NotExist;
;;;86       
;;;87       if(updateLog->upgrade_type == 'U'){
000012  7c41              LDRB     r1,[r0,#0x11]
000014  2955              CMP      r1,#0x55
000016  d003              BEQ      |L2.32|
;;;88         if(updateLog->start_address != UPDATE_START_ADDRESS)
;;;89           return Log_StartAddressERROR;
;;;90         if(updateLog->type == 'B'){
;;;91           destStartAddress = BOOT_START_ADDRESS;
;;;92           destEndAddress = BOOT_END_ADDRESS;
;;;93           destFlashType = MICO_FLASH_FOR_BOOT;
;;;94           if(updateLog->length > BOOT_FLASH_SIZE)
;;;95             return Log_dataLengthOverFlow;
;;;96         }
;;;97         else if(updateLog->type == 'A'){
;;;98           destStartAddress = APPLICATION_START_ADDRESS;
;;;99           destEndAddress = APPLICATION_END_ADDRESS;
;;;100          destFlashType = MICO_FLASH_FOR_APPLICATION;
;;;101          if(updateLog->length > APPLICATION_FLASH_SIZE)
;;;102            return Log_dataLengthOverFlow;
;;;103        }
;;;104        else if(updateLog->type == 'D'){
;;;105          destStartAddress = DRIVER_START_ADDRESS;
;;;106          destEndAddress = DRIVER_END_ADDRESS;
;;;107          destFlashType = MICO_FLASH_FOR_DRIVER;
;;;108          if(updateLog->length > DRIVER_FLASH_SIZE)
;;;109            return Log_dataLengthOverFlow;
;;;110        }
;;;111        else 
;;;112          return Log_contentTypeNotExist;
;;;113        
;;;114        return Log_NeedUpdate;
;;;115      }
;;;116      else
;;;117        return Log_UpdateTagNotExist;
000018  2003              MOVS     r0,#3
;;;118    }
00001a  4770              BX       lr
                  |L2.28|
00001c  2001              MOVS     r0,#1                 ;85
00001e  4770              BX       lr
                  |L2.32|
000020  4a19              LDR      r2,|L2.136|
000022  6801              LDR      r1,[r0,#0]            ;88
000024  4291              CMP      r1,r2                 ;88
000026  d001              BEQ      |L2.44|
000028  2006              MOVS     r0,#6                 ;89
00002a  4770              BX       lr
                  |L2.44|
00002c  7c01              LDRB     r1,[r0,#0x10]         ;90
00002e  2301              MOVS     r3,#1                 ;85
000030  4a16              LDR      r2,|L2.140|
000032  2942              CMP      r1,#0x42              ;90
000034  d005              BEQ      |L2.66|
000036  2941              CMP      r1,#0x41              ;97
000038  d00e              BEQ      |L2.88|
00003a  2944              CMP      r1,#0x44              ;104
00003c  d017              BEQ      |L2.110|
00003e  2004              MOVS     r0,#4                 ;112
000040  4770              BX       lr
                  |L2.66|
000042  f04f6100          MOV      r1,#0x8000000         ;91
000046  6051              STR      r1,[r2,#4]            ;92  ; destStartAddress
000048  4911              LDR      r1,|L2.144|
00004a  6091              STR      r1,[r2,#8]            ;93  ; destEndAddress
00004c  7013              STRB     r3,[r2,#0]            ;93
00004e  6840              LDR      r0,[r0,#4]            ;94
000050  f5b04f80          CMP      r0,#0x4000            ;94
000054  d814              BHI      |L2.128|
000056  e015              B        |L2.132|
                  |L2.88|
000058  490e              LDR      r1,|L2.148|
00005a  6051              STR      r1,[r2,#4]            ;99  ; destStartAddress
00005c  490a              LDR      r1,|L2.136|
00005e  1e49              SUBS     r1,r1,#1              ;99
000060  6091              STR      r1,[r2,#8]            ;100  ; destEndAddress
000062  7013              STRB     r3,[r2,#0]            ;100
000064  6840              LDR      r0,[r0,#4]            ;101
000066  f5b02fa8          CMP      r0,#0x54000           ;101
00006a  d809              BHI      |L2.128|
00006c  e00a              B        |L2.132|
                  |L2.110|
00006e  490a              LDR      r1,|L2.152|
000070  6051              STR      r1,[r2,#4]            ;106  ; destStartAddress
000072  490a              LDR      r1,|L2.156|
000074  6091              STR      r1,[r2,#8]            ;107  ; destEndAddress
000076  7013              STRB     r3,[r2,#0]            ;107
000078  6840              LDR      r0,[r0,#4]            ;108
00007a  f5b02f80          CMP      r0,#0x40000           ;108
00007e  d901              BLS      |L2.132|
                  |L2.128|
000080  2005              MOVS     r0,#5                 ;109
000082  4770              BX       lr
                  |L2.132|
000084  2002              MOVS     r0,#2                 ;114
000086  4770              BX       lr
;;;119    
                          ENDP

                  |L2.136|
                          DCD      0x08060000
                  |L2.140|
                          DCD      ||.data||
                  |L2.144|
                          DCD      0x08003fff
                  |L2.148|
                          DCD      0x0800c000
                  |L2.152|
                          DCD      0x080c0000
                  |L2.156|
                          DCD      0x080fffff

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  data
                          %        4096
                  newData
                          %        4096
                  paraSaveInRam
                          %        16384

                          AREA ||.data||, DATA, ALIGN=2

                  destFlashType
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  destStartAddress
                          DCD      0x00000000
                  destEndAddress
                          DCD      0x00000000
